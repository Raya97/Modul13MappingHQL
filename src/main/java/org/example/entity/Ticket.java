package org.example.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.io.Serializable;
import java.time.Instant;

/**
 * The Ticket class represents an entity of a ticket in the database.
 * It is used to store and manage information about travel tickets within the system.
 *
 * Hibernate annotations are used to map this class to the corresponding table in the database.
 * Lombok annotations (@Getter, @Setter) automatically generate getters and setters for all fields in the class.
 *
 * Implements:
 * - Serializable: Allows instances of this class to be serialized, which is useful for sending them over a network or saving them to files.
 */
@Entity // Indicates that this class is an entity that Hibernate will map to a table in the database.
@Getter // Generates getters for all fields in the class.
@Setter // Generates setters for all fields in the class.
@Table(name = "tickets") // Specifies that this class is mapped to a table named "tickets" in the database.
public class Ticket implements Serializable {

    /**
     * The unique identifier for the ticket.
     * This is a primary key that is automatically generated.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Specifies that the ID is auto-generated by the database.
    private Long id;

    /**
     * The timestamp when the ticket was created.
     * This field is required and stores the creation time in UTC.
     */
    @Column(name = "created_at", nullable = false) // Maps this field to a column named "created_at" in the table.
    private Instant createdAt;

    /**
     * The client associated with this ticket.
     * This field is required and establishes a many-to-one relationship with the Client entity.
     */
    @ManyToOne // Specifies a many-to-one relationship with the Client entity.
    @JoinColumn(name = "client_id", nullable = false) // Maps this field to the "client_id" column, enforcing a foreign key constraint.
    private Client client;

    /**
     * The planet from which the passenger departs.
     * This field is required and establishes a many-to-one relationship with the Planet entity.
     */
    @ManyToOne // Specifies a many-to-one relationship with the Client entity.
    @JoinColumn(name = "from_planet_id", nullable = false) // Maps this field to the "client_id" column, enforcing a foreign key constraint.
    private Planet fromPlanet;

    /**
     * The planet to which the passenger is traveling.
     * This field is required and establishes a many-to-one relationship with the Planet entity.
     */
    @ManyToOne // Specifies a many-to-one relationship with the Client entity.
    @JoinColumn(name = "to_planet_id", nullable = false) // Maps this field to the "client_id" column, enforcing a foreign key constraint.
    private Planet toPlanet;
}